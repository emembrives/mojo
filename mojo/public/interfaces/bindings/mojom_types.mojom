// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="mojo.bindings.types",
JavaPackage="org.chromium.mojo.bindings.types"]
module mojo.bindings.types;


/*
* This file contains definitions of data structures used to represent
* Mojom types and partially resolved Mojom type schema. The distinction between
* these is explained below.
*
* As described in the Mojom Language Specification, Mojom types are defined
* recursively and consequently a |Type| object may recursively contain
* other |Type| objects. For example a |Type| object representing an array<int32>
* will contain a |Type| object representing an int32.
*
* A Mojom type declaration may contain an identifier that resolves  to a
* user-defined type: a struct, union, enum or interface. We use |TypeReference|
* to represent an occurrence of such an identifier. A |TypeReference| may be
* resolved or not. Resolved means that the user-defined type to which the
* identifier refers has been found and associated with the |TypeReference|.
* (We say more below about how this association works.)  A |Type| object is
* fully-resolved if it, and recursively all of its sub-components, do not
* contain any unresolved TypeReferences. A |Type| object that is fully
* resolved represents a Mojom type. Otherwise we say that the |Type| object
* represents only a type schema, because until all of the identifiers have been
* resolved we don't know exactly which type it represents.
*
* The data structures defined in this file are useful in different contexts
* depending on whether the structures are fully-resolved or not. For example
* as a representation of partially resolved Mojom type declarations the
* structures may be useful as the intermediate representation output by the
* front end of a Mojom compiler. As a representation of fully-resolved Mojom
* types the structures may be useful at runtime for a service that deserializes
* arbitrary Mojo messages given only the name of the interface with which the
* message is associated.
*
* A resolved |TypeReference| does not literally contain a structure representing
* the type that it represents but rather refers to its target type indirectly
* via a string called a |type_key|. This key may be exchanged (via a mechanism
* described below) for an instance of a data structure that describes
* the resolved type.
*
* The reason for this extra level of indirection is that Mojom types, being
* recursive, are allowed to reference themselves. But Mojo messages are not
* allowed to point to themselves. We give an example to clarify this. Consider
* the following perfectly valid user-defined Mojom struct:
*
* struct TreeNode {
*   TreeNode left_child;
*   TreeNode right_child;
* };
*
* Consider how this type should be represented as an object from this file.
* The |MojomStruct| structure defined below is used to represent structures.
* So let us attempt to define an instance of |MojomStruct| called |tree_node|
* that represents the type |TreeNode|. A |MojomStruct| contains an array of
* |StructField|s each of which contains a |Type|. So |tree_node| would have
* two |StructField|s. But what should be the |Type| of these |StructField|s?
* It needs to be some instance of |Type|. At first we might suppose that the
* |Type| should be |tree_node| itself. But this is impossible because it
* would require that the definition of |tree_node| recursively pointed to
* itself, and this is forbidden in the definition of a Mojo message. We might
* think that we could get out of this dilemma by defining two copies of
* |tree_node| called |tree_node_2| and |tree_node_3| and setting the |Type|s of
* the |StructField|s of |tree_node| to be |tree_node_2| and |tree_node_3|.
* But we soon realize that this solution also does not work because we are
* then left with the problem of defining the |Type|s of the two |StructFields|
* of |tree_node_2| and |tree_node_3|.
*
* Our solution to this problem is to assign a |type_key| to the
* user-defined type TreeNode. Let's call this key |x|. Then we set the |Type|
* of the two |StructFields| of |tree_node| to be a resolved |TypeReference| with
* a |type_key| of x.
*
* The mapping from |type_keys| to user-defined type definitions is contained
* in a structure called a |MojomDescriptor| which is not defined in this file
* but rather in "mojom_descriptors.mojom" which imports this file. A |Type|
* object is associated with some instance of MojomDescriptor we call the owning
* MojomDescriptor. In order to recover the user-defined type associated with the
* |type_key| in a resolved |TypeReference| one uses the owning MojomDescriptor.
*/

// The different kinds of types. We divide the types into five categories:
// simple, string, compound, handle, and user-defined.
union Type {
  SimpleType simple_type;

  StringType string_type;

  // The compound types. These are built from simpler types.
  ArrayType array_type;
  MapType map_type;

  HandleType handle_type;

  // This represents an occurrence of a user-defined type identifier that
  // refers to an enum, struct, union, interface or interface request.
  TypeReference type_reference;
};

// The set of simple types.
enum SimpleType {
  BOOL,
  DOUBLE,
  FLOAT,
  INT8,
  INT16,
  INT32,
  INT64,
  UINT8,
  UINT16,
  UINT32,
  UINT64
};

struct StringType {
  bool nullable;
};

struct HandleType {
  enum Kind {
    UNSPECIFIED,
    MESSAGE_PIPE,
    DATA_PIPE_CONSUMER,
    DATA_PIPE_PRODUCER,
    SHARED_BUFFER,
  };

  bool nullable;
  Kind kind = UNSPECIFIED;
};

struct ArrayType {
  bool nullable;
  // If fixed_length < 0 then the array does not have a fixed length;
  int32 fixed_length = -1;

  Type element_type;
};

struct MapType {
  bool nullable;
  // The key_type must be a non-reference type or a string.
  Type key_type;
  Type value_type;
};

// Represents an occurence of a user-defined type identifier that should
// resolve to an enum, struct, union, interface or interface request. This type
// reference may be either resolved or unresolved. If the reference has been
// resolved then the |type_key| field is populated.
struct TypeReference {
  // Was this occurrence marked as nullable?
  bool nullable;

  // Was this occurrence marked as being an interface request? If so then
  // this reference must (eventually) resolve to an interface type.
  bool is_interface_request;

  // The identifier, as it appears in the occurrence. Note that this may be
  // a short name, a fully-qualified identifier, or a partially qualified
  // identifier. Either this field or type_key must be non-null. Some
  // implementations will keep this field even after the reference has been
  // resolved.
  // Note(rudominer) Consider requiring this to be the fully-qualified
  // identifier which would imply that some name resolution must always occur
  // before a TypeReference structure is created. Otherwise consider adding
  // a Scope field to TypeReference so that resolution may occur later.
  string? identifier;


  // This field is non-null if this reference has been resolved.
  string? type_key;
};

////////////////////////////////////////////////////////////////////////////
// The data structures below represent user-defined types or type
// declarations. Instances of these are not literally contained in a
// |Type| object. In a fully-resolved context these represent types and are
// obtained from the  owning |MojomDescriptor|.
////////////////////////////////////////////////////////////////////////////

// A field of a struct. These structures are contained in the |fields| field
// of the |MojomStruct| struct.
struct StructField {
  DeclarationData? decl_data; // Some implementations may not provide this.

  Type field_type;

  // The value must eventually resolve to a ConstantValue of type |field_type|.
  ConstantOccurrence? default_value;

  // The offset in bytes from the start of the serialized struct, not including
  // the eight-byte header, of the first byte of this field. In the case of
  // boolean fields, this refers to the byte in which the field's bit is
  // located but not which bit corresponds to the field.
  // A negative value means unset.
  int32 offset;
};

struct StructVersion {
  uint32 version_number;
  uint32 num_fields;
  uint32 num_bytes;
};

struct MojomStruct {
  DeclarationData? decl_data; // Some implementations may not provide this.

  // The fields are in ordinal order. Note that this may be different than
  // the order in which the fields are declared in the .mojom file.
  array<StructField> fields;

  // Information about the different declared versions of this MojomStruct.
  // Versions are implicitly declared in a .mojom file by use of the
  // "MinVersion" attribute on the fields. If |version_info| is not null then
  // it contains at least one element for version 0 and its elements are
  // in increasing |version_number| order.
  array<StructVersion>? version_info;
};

// A field of a union. These structures are contained in the |fields| field
// of the |MojomUnion| struct.
struct UnionField {
  DeclarationData? decl_data; // Some implementations may not provide this.

  Type type;
  uint32 tag;
};

struct MojomUnion {
  DeclarationData? decl_data; // Some implementations may not provide this.

  // The fields are in tag order. Note that this may be different than
  // the order in which the fields are declared in the .mojom file.
  array<UnionField> fields;
};

struct EnumValue {
  DeclarationData? decl_data; // Some implementations may not provide this.

  // The value must eventually resolve to a ConstantValue of type integer or
  // EnumConstantValue.
  ConstantOccurrence value;
};

struct MojomEnum {
  DeclarationData? decl_data; // Some implementations may not provide this.

  // The MojomEnum is fully resolved just in case all of the EnumValues are.
  array<EnumValue> values;
};

struct MojomMethod {
  DeclarationData? decl_data; // Some implementations may not provide this.

  MojomStruct parameters;

  // Note that there is a difference between response_params being null and
  // it containing zero fields. The former means that the method does
  // not have a return message. The latter means that it does have a
  // zero-argument return message.
  MojomStruct? response_params;
};

struct MojomInterface {
  DeclarationData? decl_data;

  // All the methods in the interface. The keys are the method ordinals.
  map<uint32, MojomMethod> methods;
};

////////////////////////////////////////////////////////////////////////////
// Representations of Mojom Constants
////////////////////////////////////////////////////////////////////////////

// Represents an occurrence of a constant. This is either a literal or as an
// identifier that refers to a declared constant.
struct ConstantOccurrence {
  // This constant occurrence is fully resolved just in case |value| is not
  // null. If the constant occurrence was a literal then it is necessarily
  // resolved to the value of the literal. If the constant occurrence was an
  // identifier then it may or may not be resolved.
  ConstantValue? value;

  // Either |value| or |identifier| must be non-null. Some implementations
  // will maintain |identifier| even after the constant occurrence has been
  // resolved.
  ConstantReference? identifier;
};

union ConstantValue {
  bool bool_value;
  double double_value;
  float float_value;
  int8 int8_value;
  int16 int16_value;
  int32 int32_value;
  int64 int64_value;
  string string_value;
  uint8 uint8_value;
  uint16 uint16_value;
  uint32 uint32_value;
  uint64 uint64_value;
  EnumConstantValue enum_value;
};

// Represents an occurrence of a user-defined identifier that should resolve to
// a constant. The constant reference may or may not be resolved. If it is
// resolved then |constant_key| is not null.
struct ConstantReference {
  // The identifier, as it appears in the occurrence. Note that this may be
  // a short name, a fully-qualified identifier, or a partially qualified
  // identifier.
  string identifier;

  // This field is non-null if this reference has been resolved. Note that
  // because a constant may be defined in terms of another constant, it is
  // possible that this is non-null but yet the |ConstantOccurrence| containing
  // this reference is not fully resolved and so its |value| is null. Also
  // note that some implementations will not provide this field for a
  // fully-resolved |ConstantOccurrence|.
  string? constant_key;
};

struct EnumConstantValue {
  // The reference must be resolved to an MojomEnum.
  TypeReference enum_type;

  string? enum_value_name;  // Some implementations may not provide this name.

  // The integer value that the enum value name resolves to.
  int32 int_value;
};

// This represents a Mojom constant declaration.
struct DeclaredConstant {
  DeclarationData decl_data;

  // The type must be a string, bool, float, double, or integer type.
  Type type;

  // The value must eventually resolve to the same type as |type|.
  ConstantOccurrence value;
};

////////////////////////////////////////////////////////////////////////////
// Declaration Data
////////////////////////////////////////////////////////////////////////////

// This structure contains additional data that may be present in
// a Mojom declaration. Some implementations of |MojomDescriptor| may
// provide some of this data.
struct DeclarationData {
  array<Attribute>? attributes;

  // The value of the "MinVersion" attribute, if any. This field is
  // for convenience as it can also be parsed from the |attributes| field.
  int32 min_version = -1; // Negative value means unset.

  string? short_name;  // Some implementations may not provide names.

  // The fully-qualified identifier is the concatenation of the names of the
  // containing scopes, starting from the module name, with a period ('.')
  //  between components and with the |short_name| at the end.
  string? full_identifier;

  // The serialization ordinal of this element as declared in the
  // .mojom file using the "@" notation.
  int32 declared_ordinal = -1; // Negative value means unset.

  // The zero-based ordinal position of this element within its containing
  // scope as it appears in the Mojom declaration. This is not the serialization
  // ordinal.
  int32 declaration_order = -1;

  SourceFileInfo? source_file_info;

  // Some types (namely structs and interfaces) act as namespaces in which
  // enums and constants may be declared. Some implementations may populate
  // this field in order to describe that containment.
  ContainedDeclarations? contained_declarations;
};

struct SourceFileInfo {
  string file_name;

  // The 1-based line and column number. A value of zero means unset.
  uint32 line_number;
  uint32 column_number;
};

// Some types (namely structs and interfaces) act as namespaces in which
// enums and constants may be declared.
struct ContainedDeclarations {
  // The type keys of enums declared in this namespace.
  array<string>? enums;

  // The the constant keys of constants declared in this namespace.
  array<string>? constants;
};

struct Attribute {
  string key;
  string value;
};


